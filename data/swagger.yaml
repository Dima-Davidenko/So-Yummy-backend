---
openapi: 3.0.0
info:
  title: So Yummy API docs
  description: The API for the So Yummy project
  version: 1.0.0
servers:
  - url: https://so-yummy.onrender.com/api
paths:
  /users/signup:
    post:
      tags:
        - Auth
      summary: Register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterCredentials'
        required: true
      responses:
        '200':
          description: User registration successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Validation error's description
        '409':
          description: Conflict
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
  /users/login:
    post:
      tags:
        - Auth
      summary: Login User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInfo'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"name" is not allowed'
        '401':
          description: Unauthorized - Email is not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is not verified
        '403':
          description: Forbidden - Email or password is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email or password is wrong
        '409':
          description: Conflict - Register to confirm your Google User account
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Register to confirm your Google User account
        '429':
          description: Conflict - Only one active session is permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Too many active sessions
  /users/login-google:
    post:
      tags:
        - Auth
      summary: Login User
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/googleAuthBody'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginInfo'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Bad request
        '429':
          description: Conflict - Only one active session is permitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Too many active sessions
  /users/reset/send-reset-link:
    post:
      tags:
        - Auth
      summary: Send link on email with reset token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetLinkBody'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email with link to reset password has been sent
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"email" is required'
        '401':
          description: Unauthorized - Email is not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is not verified
        '403':
          description: Forbidden - Email is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is wrong
        '409':
          description: Conflict - some income data are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Conflict
        '425':
          description: Too early - acceptable time between requests is 60 seconds
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: 45
  /users/reset/reset-password:
    post:
      tags:
        - Auth
      summary: Reset user's password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResetPasswordBody'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResetPasswordToken'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"email" is required'
        '401':
          description: Unauthorized - Email is not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is not verified
        '403':
          description: Forbidden - Email is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is wrong
        '409':
          description: Conflict - some income data are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Conflict
  /users/reset/set-new-password:
    post:
      tags:
        - Auth
      summary: Set new user's password
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetNewPasswordBody'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Success
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"email" is required'
        '401':
          description: Unauthorized - Email is not verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is not verified
        '403':
          description: Forbidden - Email is wrong
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email is wrong
        '409':
          description: Conflict - some income data are invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Conflict
  /users/logout:
    post:
      tags:
        - Auth
      summary: Logout a user
      responses:
        '204':
          description: Successful operation
        '401':
          description: Unauthorized - Invalid or empty access token)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
      security:
        - bearerAuth: []
  /users/refresh:
    post:
      tags:
        - Auth
      summary: Logout a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshBody'
        required: true
      responses:
        '200':
          description: Successful refresh response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse200'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"refreshToken" is required or invalid'
        '403':
          description: Invalid refresh token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: invalid token
  /users/verify/{verificationToken}:
    get:
      tags:
        - Auth
      summary: Verification User's email
      parameters:
        - name: verificationToken
          in: path
          description: Verification token
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Successful email verification
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification is successful
        '404':
          description: User is not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: User is not found
  /users/verify/resend-email:
    post:
      tags:
        - Auth
      summary: Resend verification token
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginCredentials'
        required: true
      responses:
        '200':
          description: Successful login response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification email is sent
        '400':
          description: Verification has already been passed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Verification has already been passed
        '403':
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Email or password is wrong
  /users/current:
    get:
      tags:
        - Auth
      summary: Get user's info
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
      security:
        - bearerAuth: []
  /user-info/set-user-info:
    post:
      tags:
        - User
      summary: Update user's name and avatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserInfoBody'
        required: true
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"name" is required'
        '500':
          description: Image processing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /user-info/shopping-list:
    get:
      tags:
        - User
      summary: Get user's shopping list
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
      security:
        - bearerAuth: []
    post:
      tags:
        - User
      summary: Add product to user's shopping list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToShoppingListBody'
        required: true
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Wrong product ID | Wrong measure
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '403':
          description: Forbidden - You have reached the maximum length of the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: You have reached the maximum length (100) of your shopping list
        '404':
          description: Not found - No such ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: No such ingredient
      security:
        - bearerAuth: []
    patch:
      tags:
        - User
      summary: Remove product from user's shopping list
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddToShoppingListBody'
        required: true
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ShoppingList'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Wrong product ID | Wrong measure
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '404':
          description: Not found - No such ingredient
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: No such ingredient
      security:
        - bearerAuth: []
  /user-info/subscribe-list:
    post:
      tags:
        - User
      summary: Update user's name and avatar
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddSubscribeListBody'
        required: true
      responses:
        '200':
          description: Operation is successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SubscribeListResponse'
        '400':
          description: Invalid request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: '"email" is required'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
      security:
        - bearerAuth: []
  /recipes:
    get:
      tags:
        - Recipes
      summary: Get list of recipes from general recipes database.
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
        - name: sort
          in: query
          description:
            If 'popular' - result is sorted by popularity. By default it's sorted by title
          required: false
          style: form
          explode: true
          schema:
            enum:
              - title
              - popular
            default: popular
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/main-page:
    get:
      tags:
        - Recipes
      summary: Get random 4 recipes from 4 categories on main page.
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MainPageResponse'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/favorite:
    get:
      tags:
        - Recipes
      summary: Get list of favorite recipes from general and own recipes databases.
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
        - name: sort
          in: query
          description:
            If 'popular' - result is sorted by popularity. By default it's sorted by title
          required: false
          style: form
          explode: true
          schema:
            enum:
              - title
              - popular
            default: popular
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/favorite/{id}:
    patch:
      tags:
        - Recipes
      summary: Toggle favorite recipe's status by ID in general recipes database.
      parameters:
        - name: id
          in: path
          description: Recipe's ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Returns recipe's ID and current favorite status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FavoriteGeneralResponse'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '404':
          description: Recipe with ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe with ID was not found / ID is not valid ID
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/like/{id}:
    patch:
      tags:
        - Recipes
      summary: Toggle like recipe's status by ID in general recipes database.
      parameters:
        - name: id
          in: path
          description: Recipe's ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Returns recipe's ID and current like status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LikeGeneralResponse'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '404':
          description: Recipe with ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe with ID was not found / ID is not valid ID
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/id/{id}:
    get:
      tags:
        - Recipes
      summary: Get recipe by ID from general recipes database.
      parameters:
        - name: id
          in: path
          description: Recipe's ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Returns the recipe by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecipeFull'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '404':
          description: Recipe with ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe with ID was not found / ID is not valid ID
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/category/list:
    get:
      tags:
        - Recipes
      summary: Get full list of categories
      responses:
        '200':
          description: Returns the recipe by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoriesList'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/category/{category}:
    get:
      tags:
        - Recipes
      summary: Get recipes lis by Category's name from general recipes database.
      parameters:
        - name: category
          in: path
          description: Category's name
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/CategoriesSchema'
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
        - name: sort
          in: query
          description:
            If 'popular' - result is sorted by popularity. By default it's sorted by title
          required: false
          style: form
          explode: true
          schema:
            enum:
              - title
              - popular
            default: popular
      responses:
        '200':
          description: Returns the recipe by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayRecipes'
        '400':
          description: Invalid request query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Bad Request
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/title/{query}:
    get:
      tags:
        - Recipes
      summary: Get list of recipes from general recipes database that include query string.
      parameters:
        - name: query
          in: path
          description: Search query that recipe title should contain
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/CategoriesSchema'
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
        - name: sort
          in: query
          description:
            If 'popular' - result is sorted by popularity. By default it's sorted by popular
          required: false
          style: form
          explode: true
          schema:
            enum:
              - title
              - popular
            default: popular
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /recipes/ingredient/{query}:
    get:
      tags:
        - Recipes
      summary: Get list of recipes from general recipes database that include query string.
      parameters:
        - name: query
          in: path
          description: Search query that recipe title should contain
          required: true
          style: simple
          explode: false
          schema:
            $ref: '#/components/schemas/CategoriesSchema'
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
        - name: sort
          in: query
          description:
            If 'popular' - result is sorted by popularity. By default it's sorted by popular
          required: false
          style: form
          explode: true
          schema:
            enum:
              - title
              - popular
            default: popular
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /own-recipes:
    get:
      tags:
        - Own Recipes
      summary: Get list of recipes from own recipes database.
      parameters:
        - name: page
          in: query
          description: Page number
          required: false
          style: form
          explode: true
          schema:
            $ref: '#/components/schemas/PageQuery'
        - name: limit
          in: query
          description: Number of items per page
          required: false
          style: form
          explode: true
          schema:
            minimum: 1
            type: integer
            default: 12
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOwnRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
    post:
      tags:
        - Own Recipes
      summary: Add a recipe to own recipes database.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddOwnRecipeBody'
        required: true
      responses:
        '200':
          description: Returns the list of recipes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOwnRecipes'
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Error's description
      security:
        - bearerAuth: []
  /own-recipes/id/{id}:
    delete:
      tags:
        - Own Recipes
      summary: Delete recipe by ID from own recipes database.
      parameters:
        - name: id
          in: path
          description: Recipe's ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Delete own recipe by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe 64147b63f2a131ac9cfb592e has been successfully deleted
        '400':
          description: Invalid request query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Bad Request
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '403':
          description: Forbidden - An attempt to delete someone else's recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Forbidden
        '404':
          description: Recipe with ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe with ID was not found / ID is not valid ID
      security:
        - bearerAuth: []
    get:
      tags:
        - Own Recipes
      summary: Get recipe by ID from own recipes database.
      parameters:
        - name: id
          in: path
          description: Recipe's ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
      responses:
        '200':
          description: Returns recipe by ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArrayOwnRecipes'
        '400':
          description: Invalid request query
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Bad Request
        '401':
          description: Unauthorized - Invalid or empty access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Unauthorized
        '403':
          description: Forbidden - An attempt to delete someone else's recipe
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Forbidden
        '404':
          description: Recipe with ID was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoMessage'
              example:
                message: Recipe with ID was not found / ID is not valid ID
      security:
        - bearerAuth: []
components:
  schemas:
    CategoriesSchema:
      type: string
      enum:
        - Beef
        - Chicken
        - Dessert
        - Lamb
        - Miscellaneous
        - Pasta
        - Pork
        - Seafood
        - Side
        - Starter
        - Vegan
        - Vegetarian
        - Breakfast
        - Goat
        - Another
    RegisterCredentials:
      required:
        - email
        - name
        - password
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    LoginCredentials:
      required:
        - email
        - password
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
    googleAuthBody:
      required:
        - googleAuthToken
      type: object
      properties:
        googleAuthToken:
          $ref: '#/components/schemas/Token'
    Password:
      maxLength: 100
      minLength: 6
      type: string
      description: User's password
      example: qwerty
    UserName:
      maxLength: 32
      minLength: 3
      type: string
      description: User's name
      example: UserName
    Email:
      type: string
      description: User's email
      format: email
      example: UserName@mail.com
    AvatarURL:
      type: string
      description: Link to user's avatar
      format: uri
      example: https://www.gravatar.com/avatar/zzzzzzz51e4f820b32bdab872bab54f6
    LoginInfo:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
        user:
          $ref: '#/components/schemas/User'
    InfoMessage:
      type: object
      properties:
        message:
          type: string
    Token:
      type: string
      description: JWT access token
      example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY0MGQ4NmViZmIwZTYyMWU0Yzc0MTk0ZCIsImlhdCI6MTY3ODYxNTU2MiwiZXhwIjoxNjc5MjIwMzYyfQ.fKXYzEU6XTlE6ZcgdiFBRzMOkQOVz5M9gWmN3khZi7c
    User:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        email:
          $ref: '#/components/schemas/Email'
        avatarURL:
          $ref: '#/components/schemas/AvatarURL'
    Avatar:
      maxLength: 2097152
      type: string
      format: binary
    RefreshBody:
      required:
        - refreshToken
      type: object
      properties:
        refreshToken:
          $ref: '#/components/schemas/Token'
    RefreshResponse200:
      type: object
      properties:
        accessToken:
          $ref: '#/components/schemas/Token'
        refreshToken:
          $ref: '#/components/schemas/Token'
    ResetLinkBody:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
    ResetPasswordBody:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        resetEmailToken:
          $ref: '#/components/schemas/Token'
    AddSubscribeListBody:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
    SubscribeListResponse:
      type: object
      properties:
        subscribeList:
          type: array
          items:
            $ref: '#/components/schemas/Email'
    SetNewPasswordBody:
      type: object
      properties:
        email:
          $ref: '#/components/schemas/Email'
        password:
          $ref: '#/components/schemas/Password'
        resetPasswordToken:
          $ref: '#/components/schemas/Token'
    ResetPasswordToken:
      type: object
      properties:
        resetPasswordToken:
          $ref: '#/components/schemas/Token'
    UpdateUserInfoBody:
      required:
        - name
      type: object
      properties:
        name:
          $ref: '#/components/schemas/UserName'
        avatar:
          $ref: '#/components/schemas/Avatar'
    Ingredient:
      type: object
      properties:
        title:
          type: string
          description: The title of the ingredient.
          example: Worcestershire Sauce
        desc:
          type: string
          description: A description of the ingredient.
          example: A description of the ingredient.
        type:
          type: string
          description: The type of the ingredient.
          example: Sauce
        thumb:
          type: string
          description: The URL of an image of the ingredient.
          format: uri
          example: https://res.cloudinary.com/ddbvbv5sp/image/upload/v1678564914/tg9ml6cwphdrlhkz9u7o.png
        measure:
          type: string
          description: The quantity of the ingredient.
          example: 1tbsp
    RecipeFull:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        title:
          $ref: '#/components/schemas/RecipeTitle'
        category:
          $ref: '#/components/schemas/RecipeCategory'
        description:
          $ref: '#/components/schemas/RecipeDescription'
        instructions:
          type: string
          description: The cooking instructions for the recipe
          example: The cooking instructions for the recipe
        ingridients:
          type: array
          description: An array of ingredients needed for the recipe
          items:
            $ref: '#/components/schemas/Ingredient'
        time:
          $ref: '#/components/schemas/RecipeTime'
        popularity:
          $ref: '#/components/schemas/RecipePopularity'
        favorite:
          $ref: '#/components/schemas/RecipeFavorite'
        like:
          $ref: '#/components/schemas/RecipeLike'
        previewImg:
          $ref: '#/components/schemas/RecipePreviewImg'
        fullImage:
          type: string
          description: The URL of the full image for the recipe
          example: https://www.themealdb.com/images/media/meals/sutysw1468247559.jpg
        area:
          type: string
          description: The area associated with the recipe
          example: Italian
        tags:
          type: array
          description: An array of tags associated with the recipe
          items:
            type: string
            example: Pasta
    AddOwnRecipeBody:
      type: object
      properties:
        title:
          $ref: '#/components/schemas/RecipeTitle'
        category:
          $ref: '#/components/schemas/RecipeCategory'
        description:
          $ref: '#/components/schemas/RecipeDescription'
        instructions:
          type: string
          description: The cooking instructions for the recipe
          example: The cooking instructions for the recipe
        ingredients:
          type: array
          description: An array of ingredients needed for the recipe
          items:
            type: object
            properties:
              id:
                $ref: '#/components/schemas/RecipeID'
              measure:
                type: string
                example: 400g
        time:
          $ref: '#/components/schemas/RecipeTime'
        fullImage:
          type: string
          description: File object of cooked meal
          example: File Object
    FavoriteGeneralResponse:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        favorite:
          type: boolean
        popularity:
          $ref: '#/components/schemas/RecipePopularity'
    FavoriteOwnRecipesResponse:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        favorite:
          type: boolean
    LikeGeneralResponse:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        like:
          type: boolean
        popularity:
          $ref: '#/components/schemas/RecipePopularity'
    AddToShoppingListBody:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/ProductId'
        measure:
          type: string
          description: Quantity of product
          example: '400g'
    RecipeID:
      type: string
      description: The unique identifier of the recipe
      example: 640cd5ac2d9fecf12e8897fc
    ShoppingList:
      type: object
      properties:
        shoppingList:
          type: array
          items:
            $ref: '#/components/schemas/ShoppingListItem'
    ShoppingListItem:
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/ProductId'
        title:
          type: string
          description: Product's title
          example: Meat
        thumb:
          type: string
          description: The URL of the image for the product
          example: https://www.themealdb.com/images/media/meals/sutysw1468247559.jpg
        measure:
          type: array
          items:
            type: string
            example: '400g'
          description: Quantity of product
    ProductId:
      type: string
      description: The unique identifier of the product
      example: 640cd5ac2d9fecf12e8897fc
    ListItemId:
      type: string
      description: The unique identifier of the item in shopping list
      example: 640cd5ac2d9fecf12e8897fa
    RecipeTitle:
      type: string
      description: The name of the recipe
      example: Spaghetti Bolognese
    RecipeCategory:
      type: string
      description: The category of the recipe
      example: Beef
    RecipeDescription:
      type: string
      description: Recipe's description
      example: Recipe's description
    RecipeTime:
      type: string
      description: The time required to prepare the recipe
      example: '40'
    RecipePopularity:
      type: integer
      description: The popularity score of the recipe
      example: 5
    RecipeFavorite:
      type: boolean
      description: Whether or not the recipe has been marked as a favorite by the user
      example: true
    RecipeLike:
      type: boolean
      description: Whether or not the recipe has been liked by the user
      example: false
    RecipePreviewImg:
      type: string
      description: The URL of the preview image for the recipe
      example: https://res.cloudinary.com/ddbvbv5sp/image/upload/v1678560401/huqdxgwkvbhsfjqtexsm.jpg
    RecipeShort:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        title:
          $ref: '#/components/schemas/RecipeTitle'
        category:
          $ref: '#/components/schemas/RecipeCategory'
        description:
          $ref: '#/components/schemas/RecipeDescription'
        time:
          $ref: '#/components/schemas/RecipeTime'
        popularity:
          $ref: '#/components/schemas/RecipePopularity'
        favorite:
          $ref: '#/components/schemas/RecipeFavorite'
        like:
          $ref: '#/components/schemas/RecipeLike'
        previewImg:
          $ref: '#/components/schemas/RecipePreviewImg'
    ResponseRecipe:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        title:
          $ref: '#/components/schemas/RecipeTitle'
        category:
          $ref: '#/components/schemas/RecipeCategory'
        description:
          $ref: '#/components/schemas/RecipeDescription'
        preview:
          $ref: '#/components/schemas/RecipePreviewImg'
        time:
          $ref: '#/components/schemas/RecipeTime'
        popularity:
          type: integer
        like:
          type: boolean
        favorite:
          type: boolean
    ResponseOwnRecipe:
      type: object
      properties:
        _id:
          $ref: '#/components/schemas/RecipeID'
        title:
          $ref: '#/components/schemas/RecipeTitle'
        category:
          $ref: '#/components/schemas/RecipeCategory'
        description:
          $ref: '#/components/schemas/RecipeDescription'
        preview:
          $ref: '#/components/schemas/RecipePreviewImg'
        time:
          $ref: '#/components/schemas/RecipeTime'
    ArrayRecipes:
      type: object
      properties:
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRecipe'
        total:
          $ref: '#/components/schemas/TotalAvailable'
        page:
          $ref: '#/components/schemas/Page'
        limit:
          $ref: '#/components/schemas/Limit'
        sort:
          $ref: '#/components/schemas/SortOpts'
    MainPageResponse:
      type: object
      properties:
        breakfast:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRecipe'
        vegan:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRecipe'
        miscellaneous:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRecipe'
        dessert:
          type: array
          items:
            $ref: '#/components/schemas/ResponseRecipe'
    ArrayOwnRecipes:
      type: object
      properties:
        recipes:
          type: array
          items:
            $ref: '#/components/schemas/ResponseOwnRecipe'
        total:
          $ref: '#/components/schemas/TotalAvailable'
        page:
          $ref: '#/components/schemas/Page'
        limit:
          $ref: '#/components/schemas/Limit'
        sort:
          $ref: '#/components/schemas/SortOpts'
    TotalAvailable:
      type: number
      description: The number of available items
      example: 45
    Page:
      type: number
      description: Current page in the collection
      example: 2
    Limit:
      type: number
      description: The limit of items in the collection
      example: 6
    SortOpts:
      type: string
      enum:
        - title
        - popular
      description: For "title" sort alphabetically, for "popular" most popular first
      example: title

    PageQuery:
      minimum: 1
      type: integer
      default: 1
    Category:
      type: object
      properties:
        _id:
          type: string
          description: The ID of the item.
          example: '1'
        title:
          type: string
          description: The title of the item.
          example: Beef
        thumb:
          type: string
          description: The URL to the thumbnail image of the item.
          example: https://www.themealdb.com/images/category/beef.png
        description:
          type: string
          description: A description of the item.
          example: A description of the item.
    CategoriesList:
      type: array
      items:
        $ref: '#/components/schemas/Category'
    AddToShoppingListRes:
      type: object
      properties:
        listItemId:
          $ref: '#/components/schemas/ListItemId'

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
